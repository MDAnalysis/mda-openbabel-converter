name: GH Actions CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Weekly tests at midnight on Sundays run on main by default:
    #   Scheduled workflows run on the latest commit on the default or base branch.
    #   (from https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)
    - cron: "0 0 * * 0"



defaults:
  run:
    shell: bash  -l {0} 

jobs:
  main-tests:
    if: "github.repository == 'MDAnalysis/mda-openbabel-converter'"
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: false
        matrix:
          os: [macOS-latest, ubuntu-latest, windows-latest]
          python-version: ["3.10", "3.11", "3.12"]
          mdanalysis-version: ["latest", "develop"]

    steps:
    - uses: actions/checkout@v4

    - name: Build information
      run: |
        uname -a
        df -h
        ulimit -a


    # More info on options: https://github.com/conda-incubator/setup-miniconda
    - name: Install conda dependencies
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        environment-file: devtools/conda-envs/test_env.yaml
        add-pip-as-python-dependency: true

        miniforge-variant: Mambaforge
        use-mamba: true
        channels: conda-forge, defaults

        activate-environment: mda_openbabel_converter-test
        auto-update-conda: true
        auto-activate-base: false
        show-channel-urls: true


    - name: Install MDAnalysis version
      uses: MDAnalysis/install-mdanalysis@main
      with:
        version: ${{ matrix.mdanalysis-version }}
        install-tests: false
        installer:  mamba 
        shell: bash  -l {0} 

    - name: Setup Conda Environment
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: devtools/conda-envs/test_env.yaml
        environment-name: mda-ob
        create-args: >-
          python==${{ matrix.python-version }}

    - name: Install package
      run: |
        python --version
        python -m pip install .  --no-deps

    - name: Python information
      run: |
        which python
        which pip
        pip list

        conda info
        conda list


    - name: Run tests
      run: |
        pytest -n auto -v --cov=mda_openbabel_converter --cov-report=xml --color=yes mda_openbabel_converter/tests/

    - name: codecov
      if: github.repository == 'MDAnalysis/mda_openbabel_converter' && github.event_name != 'schedule'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        verbose: True


  pylint_check:
    if: "github.repository == 'MDAnalysis/mda_openbabel_converter'"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Pylint
      run: |
        which pip
        which python
        pip install pylint mdanalysis

    - name: Run Pylint
      env:
        PYLINTRC: .pylintrc
      run: |
        pylint mda_openbabel_converter


  pypi_check:
    if: "github.repository == 'MDAnalysis/mda-openbabel-converter'"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        pip install pipx twine

    - name: Build package
      run: |
        python -m pipx run build --sdist

    - name: Check package build
      run: |
        DISTRIBUTION=$(ls -t1 dist/mda_openbabel_converter-*.tar.gz | head -n 1)
        test -n "${DISTRIBUTION}" || { echo "no distribution dist/mda_openbabel_converter-*.tar.gz found"; exit 1; }
        echo "twine check $DISTRIBUTION"
        twine check $DISTRIBUTION
